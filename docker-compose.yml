version: '3.9'

services:
  db:
    image: postgis/postgis:15-3.3
    container_name: postgres_db
    restart: always
    env_file:
      - .env
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      sh -c "apt-get update && apt-get install -y cron &&
            echo '0 */12 * * * pg_dump -U $POSTGRES_USER -d $POSTGRES_DB -F c -f /backups/db_backup_$(date +\%Y-\%m-\%d_\%H-\%M-\%S).backup' > /etc/cron.d/db_backup &&
            chmod 0644 /etc/cron.d/db_backup &&
            crontab /etc/cron.d/db_backup &&
            cron &&
            docker-entrypoint.sh postgres"

  redis:
    image: redis:latest
    container_name: redis_cache
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data:/data

  backend:
    build:
      context: ./backend
    container_name: django_backend
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./backend:/app
      - ./backend/staticfiles:/app/staticfiles
      - ./backend/media:/app/media
    ports:
      - "8000:8000"
    command: >
      sh -c "until pg_isready -h db -p 5432 -U $POSTGRES_USER; do sleep 2; done &&
            until redis-cli -h redis ping | grep PONG; do sleep 2; done &&
            python manage.py migrate &&
            python manage.py collectstatic --noinput &&
            gunicorn --bind 0.0.0.0:8000 core.asgi:application -k uvicorn.workers.UvicornWorker"

  celery:
    build:
      context: ./backend
    container_name: celery_worker
    restart: always
    depends_on:
      - backend
      - redis
    env_file:
      - .env
    command: >
      sh -c "celery -A core worker --loglevel=info"

  celery_beat:
    build:
      context: ./backend
    container_name: celery_beat
    restart: always
    depends_on:
      - backend
      - redis
      - celery
    env_file:
      - .env
    command: >
      sh -c "celery -A core beat --loglevel=info"

  flower:
    image: mher/flower
    container_name: flower_monitor
    restart: always
    depends_on:
      - celery
    ports:
      - "5555:5555"
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0

  frontend:
    build:
      context: ./frontend
    container_name: nextjs_frontend
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
    depends_on:
      - backend
    env_file:
      - .env
    command: "npm run dev"

volumes:
  postgres_data:
  redis_data:
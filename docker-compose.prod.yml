version: "3.9"

services:
  db:
    image: postgis/postgis:15-3.3
    container_name: postgres_db
    restart: always
    env_file:
      - .env
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    command: >
      sh -c "echo '0 */12 * * * root /backups/backup.sh' > /etc/cron.d/db_backup &&
             chmod 0644 /etc/cron.d/db_backup &&
             crontab /etc/cron.d/db_backup &&
             cron && tail -f /dev/null"

  redis:
    image: redis:latest
    container_name: redis_cache
    restart: always
    ports:
      - "6379:6379"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: django_backend
    restart: always
    depends_on:
      - db
      - redis
    env_file:
      - .env
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 core.asgi:application -k uvicorn.workers.UvicornWorker"

  celery:
    build:
      context: ./backend
    container_name: celery_worker
    restart: always
    depends_on:
      - backend
      - redis
    env_file:
      - .env
    command: celery -A core worker --loglevel=info

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: nextjs_frontend
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      - backend
    command: "npm run build && npm run start"

volumes:
  postgres_data: